@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.Forms
@inherits FormComponent<string>
@if (Visible)
{
<div class="col-md-3">
    <div style="margin-bottom: 4px;" class="row">
        <div class="col-md-5">
            <RadzenLabel Text="@Label" style="width: 100%;text-align:right;margin-bottom:4px;">
            </RadzenLabel>
        </div>
        <div class="col-md-7">
            <input disabled="@Disabled" readonly="@ReadOnly" name="@Name" style="@Style" @attributes="Attributes" class="@GetCssClass()" tabindex="@TabIndex"
                   placeholder="@Placeholder" maxlength="@MaxLength" autocomplete="@(AutoComplete ? "on" : "off")" value="@Value" @onchange="@OnChange" id="@GetId()" />
        </div>


  
    </div>
</div>

}
@code { [Parameter]
    public bool ReadOnly { get; set; }



    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public bool AutoComplete { get; set; } = true;

    [Parameter]
    public long? MaxLength { get; set; }

    protected async System.Threading.Tasks.Task OnChange(ChangeEventArgs args)
    {
        Value = $"{args.Value}";

        await ValueChanged.InvokeAsync(Value);
        if (FieldIdentifier.FieldName != null) { EditContext?.NotifyFieldChanged(FieldIdentifier); }
        await Change.InvokeAsync(Value);
    }

    protected override string GetComponentCssClass()
    {
        var disabledCss = Disabled ? " rz-state-disabled" : "";
        var fieldCssClass = FieldIdentifier.FieldName != null ? EditContext?.FieldCssClass(FieldIdentifier) : "";
        return $"rz-textbox{disabledCss} {fieldCssClass}";
    } }
